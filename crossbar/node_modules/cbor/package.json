{
  "_args": [
    [
      {
        "raw": "cbor@>= 3.0.0",
        "scope": null,
        "escapedName": "cbor",
        "name": "cbor",
        "rawSpec": ">= 3.0.0",
        "spec": ">=3.0.0",
        "type": "range"
      },
      "/Users/Pablo/Universidad/TFG/Ewetasker_Crossbar/crossbar/crossbar/node_modules/autobahn"
    ]
  ],
  "_from": "cbor@>=3.0.0",
  "_id": "cbor@4.0.0",
  "_inCache": true,
  "_location": "/cbor",
  "_nodeVersion": "9.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/cbor_4.0.0_1518970524415_0.2393488498346923"
  },
  "_npmUser": {
    "name": "hildjj",
    "email": "joe-github@cursive.net"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cbor@>= 3.0.0",
    "scope": null,
    "escapedName": "cbor",
    "name": "cbor",
    "rawSpec": ">= 3.0.0",
    "spec": ">=3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/autobahn"
  ],
  "_resolved": "https://registry.npmjs.org/cbor/-/cbor-4.0.0.tgz",
  "_shasum": "c69e0124dc225156c0a32a70ebf0bbaf032eac0a",
  "_shrinkwrap": null,
  "_spec": "cbor@>= 3.0.0",
  "_where": "/Users/Pablo/Universidad/TFG/Ewetasker_Crossbar/crossbar/crossbar/node_modules/autobahn",
  "author": {
    "name": "Joe Hildebrand",
    "email": "joe-github@cursive.net"
  },
  "ava": {
    "files": [
      "test/*.ava.js"
    ]
  },
  "bin": {
    "cbor2comment": "./bin/cbor2comment",
    "cbor2diag": "./bin/cbor2diag",
    "cbor2json": "./bin/cbor2json",
    "json2cbor": "./bin/json2cbor"
  },
  "browser": {
    "fs": false
  },
  "bugs": {
    "url": "https://github.com/hildjj/node-cbor/issues"
  },
  "contributors": [
    {
      "name": "Patrick Gansterer",
      "email": "paroga@paroga.com",
      "url": "http://paroga.com/"
    },
    {
      "name": "Artyom Yagilev",
      "email": "github@scorpi.org",
      "url": "http://scorpi.org/"
    },
    {
      "name": "Denis Lapaev",
      "email": "den@lapaev.me",
      "url": "http://lapaev.me/"
    }
  ],
  "dependencies": {
    "bignumber.js": "^6.0",
    "commander": "^2.14.1",
    "json-text-sequence": "^0.1",
    "nofilter": "^0.0.3"
  },
  "description": "Encode and parse data in the Concise Binary Object Representation (CBOR) data format (RFC7049).",
  "devDependencies": {
    "ava": "^0.25",
    "concordance": "^3.0",
    "eslint": "^4.17",
    "garbage": "0.0",
    "jsdoc": "^3.5",
    "live-server": "*",
    "marked-man": "*",
    "minami": "*",
    "npm-run-all": "^4.1",
    "nyc": "^11.5",
    "watch": "*"
  },
  "directories": {
    "lib": "lib",
    "man": "man"
  },
  "dist": {
    "integrity": "sha512-SWtnNIThYI4bM1cg/5AKj2oKDsrFOmQb5W4pr6jaIlbsOfl/aLHJADx9hVkAqUX4PR3iDZLp8f9S6QPP9VPXxg==",
    "shasum": "c69e0124dc225156c0a32a70ebf0bbaf032eac0a",
    "tarball": "https://registry.npmjs.org/cbor/-/cbor-4.0.0.tgz",
    "fileCount": 96,
    "unpackedSize": 1848384
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "b8fc5259d3fd6ad0999dfb461eeabb902cffd8d9",
  "homepage": "http://hildjj.github.io/node-cbor/",
  "keywords": [
    "coap",
    "cbor",
    "json"
  ],
  "license": "MIT",
  "main": "./lib/cbor.js",
  "maintainers": [
    {
      "name": "dotcypress",
      "email": "dotcypress@gmail.com"
    },
    {
      "name": "hildjj",
      "email": "joe-github@cursive.net"
    },
    {
      "name": "paroga",
      "email": "paroga@paroga.com"
    }
  ],
  "man": [],
  "name": "cbor",
  "optionalDependencies": {},
  "readme": "cbor\n====\n\nEncode and parse data in the Concise Binary Object Representation (CBOR) data format ([RFC7049](http://tools.ietf.org/html/rfc7049)).\n\nInstallation:\n------------\n\n```bash\n$ npm install --save cbor\n```\n\n**NOTE**\nThis package now requires node.js 4.1 or higher.  If you want a version that\nworks with older node.js versions, you can install like this:\n\n```bash\nnpm install 'hildjj/node-cbor#node0' --save\n```\n\nDocumentation:\n-------------\nSee the full API [documentation](http://hildjj.github.io/node-cbor/).\n\nFrom the command line:\n```\n$ bin/json2cbor package.json > package.cbor\n$ bin/cbor2json package.cbor\n$ bin/cbor2diag package.cbor\n```\n\nExample:\n```javascript\nvar cbor = require('cbor');\nvar assert = require('assert');\n\nvar encoded = cbor.encode(true); // returns <Buffer f5>\ncbor.decodeFirst(encoded, function(error, obj) {\n  // error != null if there was an error\n  // obj is the unpacked object\n  assert.ok(obj === true);\n});\n\n// Use integers as keys?\nvar m = new Map();\nm.set(1, 2);\nencoded = cbor.encode(m); // <Buffer a1 01 02>\n```\n\nAllows streaming as well:\n\n```javascript\nvar cbor = require('cbor');\nvar fs = require('fs');\n\nvar d = new cbor.Decoder();\nd.on('data', function(obj){\n  console.log(obj);\n});\n\nvar s = fs.createReadStream('foo');\ns.pipe(d);\n\nvar d2 = new cbor.Decoder({input: '00', encoding: 'hex'});\nd.on('data', function(obj){\n  console.log(obj);\n});\n```\n\nThere is also support for synchronous decodes:\n\n```javascript\ntry {\n  console.log(cbor.decodeFirstSync('02')); // 2\n  console.log(cbor.decodeAllSync('0202')); // [2, 2]\n} catch (e) {\n  // throws on invalid input\n}\n```\n\nThe sync encoding and decoding are exported as a\n[leveldb encoding](https://github.com/Level/levelup#custom_encodings), as\n`cbor.leveldb`.\n\n## Supported types\n\nThe following types are supported for encoding:\n\n* boolean\n* number (including -0, NaN, and Â±Infinity)\n* string\n* Array, Set (encoded as Array)\n* Object (including null), Map\n* undefined\n* Buffer\n* Date,\n* RegExp\n* url.URL\n* [bignumber](https://github.com/MikeMcl/bignumber.js)\n\nDecoding supports the above types, including the following CBOR tag numbers:\n\n| Tag | Generated Type |\n|-----|----------------|\n| 0   | Date           |\n| 1   | Date           |\n| 2   | bignumber      |\n| 3   | bignumber      |\n| 4   | bignumber      |\n| 5   | bignumber      |\n| 32  | url.URL        |\n| 35  | RegExp         |\n\n## Adding new Encoders\n\nThere are several ways to add a new encoder:\n\n### `encodeCBOR` method\n\nThis is the easiest approach, if you can modify the class being encoded.  Add an\n`encodeCBOR` method to your class, which takes a single parameter of the encoder\ncurrently being used.  Your method should return `true` on success, else `false`.\nYour method may call `encoder.push(buffer)` or `encoder.pushAny(any)` as needed.\n\nFor example:\n\n```javascript\nclass Foo {\n  constructor () {\n    this.one = 1\n    this.two = 2\n  }\n  encodeCBOR (encoder) {\n    const tagged = new Tagged(64000, [this.one, this.two])\n    return encoder.pushAny(tagged)\n  }\n}\n```\n\nYou can also modify an existing type by monkey-patching an `encodeCBOR` function\nonto its prototype, but this isn't recommended.\n\n### `addSemanticType`\n\nSometimes, you want to support an existing type without modification to that\ntype.  In this case, call `addSemanticType(type, encodeFunction)` on an existing\n`Encoder` instance. The `encodeFunction` takes an encoder and an object to\nencode, for example:\n\n```javascript\nclass Bar {\n  constructor () {\n    this.three = 3\n  }\n}\nconst enc = new Encoder()\nenc.addSemanticType(Bar, (encoder, b) => {\n  encoder.pushAny(b.three)\n})\n```\n\n## Adding new decoders\n\nMost of the time, you will want to add support for decoding a new tag type.  If\nthe Decoder class encounters a tag it doesn't support, it will generate a `Tagged`\ninstance that you can handle or ignore as needed.  To have a specific type\ngenerated instead, pass a `tags` option to the `Decoder`'s constructor, consisting\nof an object with tag number keys and function values.  The function will be\npassed the decoded value associated with the tag, and should return the decoded\nvalue.  For the `Foo` example above, this might look like:\n\n```javascript\nconst d = new Decoder({tags: { 64000: (val) => {\n  // check val to make sure it's an Array as expected, etc.\n  const foo = new Foo()\n  foo.one = val[0]\n  foo.two = val[1]\n  return foo\n}}})\n```\n\nDevelopers\n----------\n\nGet a list of build steps with `npm run`.  I use `npm run dev`, which rebuilds,\nruns tests, and refreshes a browser window with coverage metrics every time I\nsave a `.coffee` file.  If you don't want to run the fuzz tests every time, set\na `NO_GARBAGE` environment variable:\n\n```\nenv NO_GARBAGE=1 npm run dev\n```\n\n[![Build Status](https://api.travis-ci.org/hildjj/node-cbor.png)](https://travis-ci.org/hildjj/node-cbor)\n[![Coverage Status](https://coveralls.io/repos/hildjj/node-cbor/badge.png?branch=master)](https://coveralls.io/r/hildjj/node-cbor?branch=master)\n[![Dependency Status](https://david-dm.org/hildjj/node-cbor.png)](https://david-dm.org/hildjj/node-cbor)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/hildjj/node-cbor.git"
  },
  "scripts": {
    "clean": "rm -rf coverage .nyc_output/ docs/api man/*",
    "coverage": "nyc npm test",
    "coveragehtml": "nyc report -r html",
    "coveralls": "nyc report --reporter=text-lcov | coveralls",
    "dev": "npm-run-all -p --silent watch live",
    "doc": "jsdoc -c .jsdoc.conf",
    "lint": "eslint lib/*.js bin/* test/*.js",
    "live": "live-server --port=4002 --ignorePattern='(js|css|png)$' coverage",
    "man": "mkdir -p man; for f in man_src/*.md; do b=`basename $f`; marked-man $f -o man/${b%.md}.1; gzip -9f man/${b%.md}.1; done",
    "precoveragehtml": "npm run coverage",
    "predev": "if [ ! -f coverage/index.html ]; then mkdir coverage; cp .waiting.html coverage/index.html; fi",
    "release": "npm version patch && git push --follow-tags && npm publish",
    "test": "ava",
    "watch": "watch 'npm run coveragehtml' lib/ test/"
  },
  "version": "4.0.0"
}
